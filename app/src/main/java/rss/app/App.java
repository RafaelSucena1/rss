/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package rss.app;


import de.unipassau.wolfgangpopp.xmlrss.wpprovider.*;
import de.unipassau.wolfgangpopp.xmlrss.wpprovider.utils.ByteArray;
import de.unipassau.wolfgangpopp.xmlrss.wpprovider.xml.RedactableXMLSignature;
import de.unipassau.wolfgangpopp.xmlrss.wpprovider.xml.RedactableXMLSignatureException;
import org.w3c.dom.Document;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class App {
    public static void main(String[] args) throws NoSuchAlgorithmException, RedactableXMLSignatureException, IOException, InvalidKeyException, TransformerException, RedactableSignatureException {
        System.out.println("hi there");
        System.out.println("Working Directory = " + System.getProperty("user.dir"));
        DoStuff upps = new DoStuff();


        System.out.println("bye");

    }
}

class DoStuff {
    RedactableSignature rss;
    private PublicKey publicKey;

    protected static byte[][] TEST_MESSAGE = {
            "This is a test".getBytes(),
            "This is still a test".getBytes(),
            "Moar testing".getBytes(),
            "oi23jr√∂oqi32joqjslkjflaskjdflk".getBytes(),
            "What else could I write here?".getBytes(),
            "21 is only half the truth".getBytes(),
            ("Doloremque velit at quia ad corporis nemo. Quod eveniet minima quasi minima dolorem consectetur." +
                    " Debitis voluptas sunt dolores. Vel voluptatem perspiciatis beatae vel sequi et ullam. Ullam" +
                    " explicabo est sint vel omnis laborum aperiam.").getBytes(),
    };

    DoStuff() throws NoSuchAlgorithmException, InvalidKeyException, IOException, RedactableSignatureException {
        java.security.Security.addProvider(new WPProvider());
        KeyPairGenerator glRssGenerator = KeyPairGenerator.getInstance("GLRSSwithRSAandBPA");


        KeyPair glRssKeyPair = glRssGenerator.generateKeyPair();
        System.out.println("finished generating keypair");
        publicKey = glRssKeyPair.getPublic();

        rss = RedactableSignature.getInstance("GLRSSwithRSAandBPA");

        rss.initSign(glRssKeyPair);
        signDocByLine();
    }


    public void signDocByLine() throws IOException, RedactableSignatureException, InvalidKeyException {
        List<String> linesList = Files.readAllLines(Paths.get("app/testdata/test1.xml"));
        String[] linesArray = linesList.toArray(new String[0]);
        byte[] bArray;
        int max = linesArray.length - 1;
        byte[][] linesAsBytes = new byte[max][];

        List<Identifier> rssIdentifiers = new ArrayList<Identifier>();
        List<Identifier> notRssIdentifiers = new ArrayList<Identifier>();

        byte[] chunk;
        for (String line : linesArray) {
            chunk = line.getBytes(StandardCharsets.UTF_8);
            if(line.startsWith("  ~")){
                rssIdentifiers.add(rss.addPart(chunk));
            } else {
                notRssIdentifiers.add(rss.addPart(chunk, false));
            }
        }

        SignatureOutput signatureOutput = rss.sign();

        /*for (Identifier identifier : rssIdentifiers){

            rss.addIdentifier(identifier);
        }*/
        rss.initRedact(publicKey);
        SignatureOutput newSign = rss.redact(signatureOutput);
    }
}


